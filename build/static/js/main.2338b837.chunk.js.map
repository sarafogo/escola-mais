{"version":3,"sources":["services/api/Api.js","paginas/Home/Home.js","components/form/Form.js","components/Button/Button.js","paginas/todo/Todo.js","App.js","serviceWorker.js","index.js"],"names":["Api","axios","create","baseURL","Home","props","state","usuarios","id","get","response","this","setState","data","className","map","usuario","key","name","to","Component","Form","value","onChange","addTarefa","placeholder","type","addtarefa","Button","onClick","Todo","e","target","inputValue","addTodo","userId","match","params","todoList","title","post","then","res","push","error","componentDidMount","a","delete","console","log","newTodoList","filter","todo","catch","lista","deleteTodo","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2338b837.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst Api = axios.create({ baseURL:'https://jsonplaceholder.typicode.com' });\n\n\nexport default Api;\n\n","import React, { Component } from 'react';\nimport Api from '../../services/api/Api';\nimport './home.css';\nimport { Link } from 'react-router-dom';\n\n\n\nclass Home extends Component {\n    constructor(props) {\n\n        super(props);\n\n        this.state = {\n            usuarios: [],\n            id: []\n\n        }\n    }\n\n    async componentDidMount() {\n        const response = await Api.get('/users');\n\n        this.setState({ usuarios: response.data });\n    }\n\n\n    render() {\n        const { usuarios } = this.state;\n\n\n        return (\n            <div className='home-content'>\n\n                \n                <p className='titulo'>Selecione um usuário para ver sua Lista de Tarefas:</p>\n                {usuarios.map(usuario => (\n\n                    <li className='usuarios' key={usuario.name} key={usuario.id}>\n                        <Link to={`/todo/${usuario.id}/todos`} >\n                            <p>{usuario.name}</p>\n                        </Link>\n\n\n\n                    </li>\n                ))}\n            </div>\n        );\n    };\n};\n\nexport default Home;","import React from 'react';\n\nimport './form.css';\n\nconst Form = ({value, onChange, addTarefa, className}) => {\n    return (\n        <div>\n            \n                <input\n                name='tarefa' \n                value={value}\n                onChange={onChange}\n                placeholder='Digite uma tarefa'\n                type='text'\n                addtarefa={addTarefa}\n                className={className}\n                />\n            \n\n        </div>\n    )\n}\n\nexport default Form;","import React from 'react';\n\nimport './button.css';\n\n\nconst Button = ({onClick}) => {\n    return (\n        <div>\n            <button onClick={onClick}  >Adicionar</button>\n        </div>\n\n    )\n}\n\nexport default Button;","import React, { Component } from 'react';\nimport Api from '../../services/api/Api';\nimport Form from '../../components/form/Form';\nimport './todo.css';\nimport Button from '../../components/Button/Button';\n\n\n\n\n\nclass Todo extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            todoList: [],\n            inputValue:'',\n            title: '',\n            error:''\n        };\n    }\n\n\n\n    onChange = (e) => {\n        const value = e.target.value;\n        this.setState({ inputValue: value })\n    }\n\n    addTodo = () => {\n        const userId = this.props.match.params.userId;\n        const todoList = this.state.todoList;\n        const value = {\n            title: this.state.inputValue\n        }\n        if(value.title != ''){\n\n            Api.post(`/users/${userId}/todos`, value)\n            \n            .then(res => {\n                todoList.push(res.data)\n                \n                this.setState({ todoList: todoList,  inputValue: '', error: '' })\n            })\n        } else {\n            this.setState({ error: 'Por favor, digite uma tarefa'})\n        }\n            \n\n            \n    }\n\n    deleteTodo(id) {\n        const todoList = this.state.todoList;\n\n\n        Api.delete(`/todos/${id}/`)\n            .then((res) => {\n                console.log('res', res)\n                const newTodoList = todoList.filter(todo => todo.id != id);\n                this.setState({todoList: newTodoList})\n            })\n            .catch(error =>{\n                console.log('error', error)\n                this.setState({ error: 'Não foi possivel excluir a tarefa.'})\n            })\n\n    }\n\n\n    componentDidMount = async () => {\n        const userId = this.props.match.params.userId;\n        const response = await Api.get(`/users/${userId}/todos`);\n        this.setState({ todoList: response.data })\n    };\n\n\n\n\n    render() {\n        const { todoList, error, id } = this.state;\n\n        return (\n            <div className='todo-content'>\n            <div className='div-mae'>\n                <div className='input-todo'>\n                    <Form\n                        value={this.state.inputValue}\n                        onChange={this.onChange}\n                       \n                    />\n                    <Button onClick={this.addTodo} />\n\n                </div>\n                <div>\n                    {error && <p className='error'>{error}</p>}\n                </div>\n\n                <div className='div-li'>\n                    {todoList.map(lista => (\n                        <li key={lista.title}>\n                            <div className='li-todo'>\n                                <p>{lista.title}</p>\n                                <button  onClick={() => this.deleteTodo(lista.id)} className='btn-excluir'>Excluir</button>\n\n                            </div>\n                        </li>\n\n                    ))}\n                </div>\n            </div>\n            </div>\n        )\n\n    }\n\n};\n\n\nexport default Todo;","import React from 'react';\n\nimport './App.css';\nimport Home from './paginas/Home/Home';\nimport Todo from './paginas/todo/Todo';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className=''>\n      <BrowserRouter>\n        <Switch>\n          <Route  exact path='/' component={Home} />\n          <Route path='/todo/:userId' component={Todo}/>\n          \n        </Switch>\n      </BrowserRouter>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}